# Release Pipeline
# This workflow:
# 1. Triggered by semantic version tags (v1.2.3, v2.0.0, etc.)
# 2. Runs full test suite to ensure release quality
# 3. Builds and publishes versioned Docker images with semantic tags
# 4. Signs Docker images with Cosign using GitHub OIDC Token (keyless signing)
# 5. Publishes versioned npm packages to GitHub Packages
# 6. Creates GitHub releases with build artifacts
#
# Docker images are published to ghcr.io using only GITHUB_TOKEN (no PAT required)
# Container signing uses GitHub's OIDC token for enhanced security and transparency

name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  NODE_VERSION: '22'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting
        run: npm run format:check

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm run test:unit

      - name: Build application
        run: npm run build

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
      packages: write
      id-token: write # needed for signing the images with GitHub OIDC Token

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          # Extract version from tag (e.g., v1.2.3 -> 1.2.3)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "Extracted version: ${VERSION}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        id: build-and-push
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the images with GitHub OIDC Token
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}

      - name: Configure package for GitHub Packages
        run: |
          # Update package.json for GitHub Packages
          npm pkg set publishConfig.registry=https://npm.pkg.github.com
          npm pkg set publishConfig.access=public
          npm pkg set name=@${{ github.repository_owner }}/dracula-palette
          npm pkg set version=${{ steps.version.outputs.version }}

      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.tag }}
          body: |
            Release ${{ steps.version.outputs.version }}

            ## What's Changed
            - Automated release from tag ${{ steps.version.outputs.tag }}

            ## Artifacts
            - **npm package**: `@${{ github.repository_owner }}/dracula-palette@${{ steps.version.outputs.version }}`
            - **Docker image**: `ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}`
            - **GitHub Pages**: https://${{ github.repository_owner }}.github.io/dracula-palette/
          draft: false
          prerelease: false

      - name: Create distribution archive
        run: |
          cd dist
          zip -r ../dracula-palette-dist-${{ steps.version.outputs.version }}.zip .
          cd ..

      - name: Upload build artifacts to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dracula-palette-dist-${{ steps.version.outputs.version }}.zip
          asset_name: dracula-palette-dist-${{ steps.version.outputs.version }}.zip
          asset_content_type: application/zip
