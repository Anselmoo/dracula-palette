# CI/CD Pipeline
# This workflow:
# 1. Runs tests and linting on all pushes and PRs
# 2. Publishes to GitHub Pages on main branch pushes
# 3. Builds and publishes Docker images (dev tag for main, semantic versions for git tags)
# 4. Signs Docker images with Cosign using GitHub OIDC Token (keyless signing)
# 5. Publishes npm packages to GitHub Packages (dev versions for main branch)
#
# Docker images are published to ghcr.io using only GITHUB_TOKEN (no PAT required)
# Container signing uses GitHub's OIDC token for enhanced security and transparency

name: CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '22'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting
        run: npm run format:check

      - name: Run linting
        run: npm run lint

      - name: Check SVG optimization
        run: npm run optimize:svg:check

      - name: Run type checking
        run: npm run type:check

      - name: Run unit tests
        run: npm run test:unit

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for GitHub Pages
        run: npm run build
        env:
          NODE_ENV: production

      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v4 # cspell:ignore peaceiris
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist

  build-container:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    permissions:
      contents: read
      packages: write
      id-token: write # needed for signing the images with GitHub OIDC Token

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.10.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            # Dev tag for main branch builds (overwritten each time)
            type=raw,value=dev,enable={{is_default_branch}}
            # Semantic versioning for tagged releases
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        id: build-and-push
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the images with GitHub OIDC Token
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}

  publish-npm:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Configure package for GitHub Packages
        run: |
          # Update package.json to point to GitHub Packages
          npm pkg set publishConfig.registry=https://npm.pkg.github.com
          npm pkg set publishConfig.access=public
          npm pkg set name=@${{ github.repository_owner }}/dracula-palette
          npm pkg set version=0.0.0-dev.$(git rev-parse --short HEAD)

      - name: Publish to GitHub Packages
        run: npm publish --tag dev
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
